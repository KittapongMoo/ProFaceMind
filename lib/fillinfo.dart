import 'package:flutter/material.dart';

class FillInfoPage extends StatefulWidget {
  final int userId; // (1) Add this field

  // (2) Update constructor to require userId
  const FillInfoPage({Key? key, required this.userId}) : super(key: key);

  @override
  _FillInfoPageState createState() => _FillInfoPageState();
}

class _FillInfoPageState extends State<FillInfoPage> {
  bool isEditing = false;
  final PageController _pageController = PageController();

  // üîπ ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å register.dart (‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á List<String> ‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏à‡∏≤‡∏Å register.dart ‡πÑ‡∏î‡πâ)
  final List<String> imagePaths = [
    'assets/profile1.jpg',
    'assets/profile2.jpg',
    'assets/profile3.jpg',
    'assets/profile4.jpg',
    'assets/profile5.jpg',
  ];

  final TextEditingController nicknameController = TextEditingController(text: '-');
  final TextEditingController nameController = TextEditingController(text: '‡∏ì‡∏†‡∏±‡∏ó‡∏£ ‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏™‡∏°‡∏ö‡∏∏‡∏ç');
  final TextEditingController relationController = TextEditingController(text: '‡∏´‡∏•‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì');

  @override
  Widget build(BuildContext buildContext) {
    // You can access the userId like this if needed:
    // int currentUserId = widget.userId;

    return Scaffold(
      body: Column(
        children: [
          // üîπ ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û 5 ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏î‡∏π‡πÑ‡∏î‡πâ
          Stack(
            children: [
              SizedBox(
                width: double.infinity,
                height: 250,
                child: PageView.builder(
                  controller: _pageController,
                  itemCount: imagePaths.length,
                  itemBuilder: (localCtx, index) {
                    return Image.asset(
                      imagePaths[index], // üîπ ‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å List
                      fit: BoxFit.cover,
                    );
                  },
                ),
              ),
              // üîπ ‡∏õ‡∏∏‡πà‡∏°‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö
              Positioned(
                top: 40,
                left: 16,
                child: IconButton(
                  icon: const Icon(Icons.arrow_back, color: Colors.white, size: 30),
                  onPressed: () => Navigator.pop(context),
                ),
              ),
              // üîπ ‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏≥‡πÇ‡∏û‡∏á
              Positioned(
                top: 40,
                right: 16,
                child: IconButton(
                  icon: const Icon(Icons.volume_up, color: Colors.white, size: 30),
                  onPressed: () {
                    // TODO: ‡πÉ‡∏™‡πà‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡πà‡∏≤‡∏ô‡∏≠‡∏≠‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á
                  },
                ),
              ),
            ],
          ),

          // üîπ ‡πÅ‡∏™‡∏î‡∏á indicator ‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏π‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏£
          Container(
            padding: const EdgeInsets.symmetric(vertical: 8),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.center,
              children: List.generate(imagePaths.length, (index) {
                return AnimatedBuilder(
                  animation: _pageController,
                  builder: (animCtx, child) {
                    double selected = _pageController.hasClients ? _pageController.page ?? 0 : 0;
                    return Container(
                      margin: const EdgeInsets.symmetric(horizontal: 4),
                      width: (index == selected.round()) ? 12 : 8,
                      height: 8,
                      decoration: BoxDecoration(
                        shape: BoxShape.circle,
                        color: (index == selected.round()) ? Colors.blue : Colors.grey,
                      ),
                    );
                  },
                );
              }),
            ),
          ),

          // üîπ ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
          Expanded(
            child: Container(
              padding: const EdgeInsets.all(20),
              decoration: const BoxDecoration(
                color: Colors.white,
                borderRadius: BorderRadius.only(
                  topLeft: Radius.circular(30),
                  topRight: Radius.circular(30),
                ),
              ),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  // üîπ ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠ "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•" ‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏•‡∏≤‡∏á + ‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏≠‡∏¢‡∏π‡πà‡∏Ç‡∏ß‡∏≤
                  Row(
                    children: [
                      Expanded(
                        child: Center(
                          child: Text(
                            '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
                            style: const TextStyle(fontSize: 22, fontWeight: FontWeight.bold, color: Colors.black87),
                          ),
                        ),
                      ),
                      IconButton(
                        icon: Icon(isEditing ? Icons.check : Icons.edit, color: Colors.blue),
                        onPressed: () {
                          setState(() {
                            isEditing = !isEditing;
                          });
                        },
                      ),
                    ],
                  ),
                  const SizedBox(height: 20),

                  // üîπ ‡∏ä‡πà‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏î‡πâ
                  _buildEditableField('‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô', nicknameController, isEditing),
                  _buildEditableField('‡∏ä‡∏∑‡πà‡∏≠', nameController, isEditing),
                  _buildEditableField('‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå', relationController, isEditing),

                  const Spacer(),

                  // üîπ ‡∏õ‡∏∏‡πà‡∏° "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô"
                  SizedBox(
                    width: double.infinity,
                    height: 50,
                    child: ElevatedButton(
                      onPressed: () {
                        // TODO: ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡πÉ‡∏ä‡πâ widget.userId ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÉ‡∏ô Database)
                      },
                      style: ElevatedButton.styleFrom(
                        backgroundColor: Colors.blue,
                        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
                      ),
                      child: const Text(
                        '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô',
                        style: TextStyle(fontSize: 18, color: Colors.white),
                      ),
                    ),
                  ),

                  const SizedBox(height: 20),
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }

  /// **üìå Widget ‡∏ä‡πà‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏î‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏î‡∏¥‡∏ô‡∏™‡∏≠**
  Widget _buildEditableField(String label, TextEditingController controller, bool isEditable) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 8.0),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            '$label :',
            style: const TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
          ),
          const SizedBox(height: 5),
          TextField(
            controller: controller,
            enabled: isEditable, // üîπ ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏´‡πâ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏î‡∏¥‡∏ô‡∏™‡∏≠
            decoration: InputDecoration(
              filled: true,
              fillColor: Colors.grey[200],
              border: OutlineInputBorder(
                borderRadius: BorderRadius.circular(10),
                borderSide: BorderSide.none,
              ),
            ),
          ),
        ],
      ),
    );
  }
}
