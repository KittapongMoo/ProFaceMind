import 'dart:io';
import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'main.dart';
import 'setmap.dart'; // ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
import 'camera.dart'; // ‡∏Å‡∏•‡πâ‡∏≠‡∏á
import 'ownerinfo.dart'; // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
import 'setphonenum.dart'; // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô
import 'fillinfo.dart'; // ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
import 'package:sqflite/sqflite.dart';
import 'package:path/path.dart' as p;

class SecondPage extends StatefulWidget {
  const SecondPage({Key? key}) : super(key: key);

  @override
  _SecondPageState createState() => _SecondPageState();
}

class _SecondPageState extends State<SecondPage> {
  late Future<Map<String, String>> _savedInformation;
  late Future<List<Map<String, dynamic>>> _usersFuture; // For DB records

  @override
  void initState() {
    super.initState();
    _loadData();
  }

  // Helper to load data
  void _loadData() {
    _savedInformation = _loadSavedInformation();
    _usersFuture = _loadUsersWithImages();
  }

  Future<void> _deleteUser(BuildContext context, int userId) async {
    // Ask for confirmation
    final bool confirmed = await showDialog<bool>(
          context: context,
          builder: (ctx) => AlertDialog(
            title: const Text('Confirm Delete'),
            content: const Text('Are you sure you want to delete this user?'),
            actions: [
              TextButton(
                child: const Text('Cancel'),
                onPressed: () => Navigator.of(ctx).pop(false),
              ),
              TextButton(
                child: const Text('Delete'),
                onPressed: () => Navigator.of(ctx).pop(true),
              ),
            ],
          ),
        ) ??
        false;

    if (!confirmed) return; // User cancelled

    final db = await _getDatabase();

    // 1) Fetch the user's images so we can delete them from the file system
    final imageRows = await db
        .query('user_images', where: 'user_id = ?', whereArgs: [userId]);
    for (var row in imageRows) {
      final path = row['image_path'] as String;
      final file = File(path);
      if (file.existsSync()) {
        file.deleteSync(); // Delete the image file
      }
    }

    // 2) Delete from user_images
    await db.delete('user_images', where: 'user_id = ?', whereArgs: [userId]);

    // 3) Delete from users
    await db.delete('users', where: 'id = ?', whereArgs: [userId]);

    // 4) Refresh the list
    setState(() {
      _usersFuture = _loadUsersWithImages();
    });
  }

  /// **üìå ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å SharedPreferences**
  Future<Map<String, String>> _loadSavedInformation() async {
    final prefs = await SharedPreferences.getInstance();
    return {
      'nickname': prefs.getString('nickname') ?? '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
      'firstname': prefs.getString('firstname') ?? '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
      'lastname': prefs.getString('lastname') ?? '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
      'birthdate': prefs.getString('birthdate') ?? '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
      'height': prefs.getString('height') ?? '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
      'weight': prefs.getString('weight') ?? '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
      'condition': prefs.getString('condition') ?? '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
      'emergency_name': prefs.getString('emergency_name') ?? '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
      'emergency_relation':
          prefs.getString('emergency_relation') ?? '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
      'emergency_phone': prefs.getString('emergency_phone') ?? '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
      // üìç ‡πÇ‡∏´‡∏•‡∏î Latitude ‡πÅ‡∏•‡∏∞ Longitude
      'latitude':
          prefs.getDouble('selected_latitude')?.toString() ?? '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
      'longitude':
          prefs.getDouble('selected_longitude')?.toString() ?? '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
    };
  }

  /// Opens the existing database without re-creating it.
  Future<Database> _getDatabase() async {
    String dbPath = await getDatabasesPath();
    String path = p.join(dbPath, 'facemind.db');
    return openDatabase(path);
  }

  /// Loads all users plus their images in one query, grouped by user_id.
  Future<List<Map<String, dynamic>>> _loadUsersWithImages() async {
    final db = await _getDatabase();

    // Query with LEFT JOIN
    final List<Map<String, dynamic>> rawResults = await db.rawQuery('''
      SELECT 
        u.id, 
        u.nickname, 
        u.name, 
        u.relation, 
        u.primary_image,
        ui.image_path
      FROM users u
      LEFT JOIN user_images ui ON ui.user_id = u.id
    ''');

    // Group the data by user_id
    final Map<int, Map<String, dynamic>> groupedData = {};

    for (var row in rawResults) {
      final int userId = row['id'] as int;

      // If this user hasn't been added yet, create the base record
      if (!groupedData.containsKey(userId)) {
        groupedData[userId] = {
          'id': userId,
          'nickname': row['nickname'],
          'name': row['name'],
          'relation': row['relation'],
          'primary_image': row['primary_image'],
          'images': <String>[],
        };
      }

      // If there's an image_path, add it to the 'images' list
      if (row['image_path'] != null) {
        groupedData[userId]!['images'].add(row['image_path'] as String);
      }
    }

    // Return the grouped data as a list
    return groupedData.values.toList();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î'),
        backgroundColor: Colors.blue,
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // SharedPreferences Data Section
            _buildSectionTitle('üìå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (SharedPreferences)'),
            FutureBuilder<Map<String, String>>(
              future: _savedInformation,
              builder: (context, snapshot) {
                if (snapshot.connectionState == ConnectionState.waiting) {
                  return const Center(child: CircularProgressIndicator());
                } else if (snapshot.hasError) {
                  return const Center(
                      child: Text('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'));
                } else if (!snapshot.hasData || snapshot.data!.isEmpty) {
                  return const Center(child: Text('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ'));
                }

                final data = snapshot.data!;
                return Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    _buildInfoTile('‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô', data['nickname']!),
                    _buildInfoTile('‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏£‡∏¥‡∏á', data['firstname']!),
                    _buildInfoTile('‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•', data['lastname']!),
                    _buildInfoTile('‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î', data['birthdate']!),
                    _buildInfoTile('‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á', data['height']!),
                    _buildInfoTile('‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å', data['weight']!),
                    _buildInfoTile('‡πÇ‡∏£‡∏Ñ‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß', data['condition']!),
                    _buildSectionTitle('üìå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô'),
                    _buildInfoTile('‡∏ä‡∏∑‡πà‡∏≠', data['emergency_name']!),
                    _buildInfoTile('‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå', data['emergency_relation']!),
                    _buildInfoTile('‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£', data['emergency_phone']!),
                    _buildSectionTitle('üìå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å'),
                    _buildInfoTile('‡∏•‡∏∞‡∏ï‡∏¥‡∏à‡∏π‡∏î', data['latitude']!),
                    _buildInfoTile('‡∏•‡∏≠‡∏á‡∏à‡∏¥‡∏à‡∏π‡∏î', data['longitude']!),
                  ],
                );
              },
            ),

            const SizedBox(height: 20),

            // New Section: Database Information
            // New Section: Database Information
            _buildSectionTitle('üìå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡∏à‡∏≤‡∏Å Database)'),
            FutureBuilder<List<Map<String, dynamic>>>(
              future: _usersFuture,
              builder: (context, snapshot) {
                if (snapshot.connectionState == ConnectionState.waiting) {
                  return const Center(child: CircularProgressIndicator());
                } else if (snapshot.hasError) {
                  return const Center(
                      child: Text('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'));
                } else if (!snapshot.hasData || snapshot.data!.isEmpty) {
                  return const Center(
                      child: Text('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'));
                }

                final users = snapshot.data!;

                return ListView.builder(
                  shrinkWrap: true,
                  physics: const NeverScrollableScrollPhysics(),
                  itemCount: users.length,
                  itemBuilder: (context, index) {
                    final user = users[index];
                    final int userId = user['id'] as int;
                    final String nickname = user['nickname'] ?? '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô';
                    final String name = user['name'] ?? '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠';
                    final String relation =
                        user['relation'] ?? '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå';

                    // All images for this user
                    final List<String> imagePaths =
                        List<String>.from(user['images'] as List);

                    return Card(
                      margin: const EdgeInsets.symmetric(vertical: 8.0),
                      child: Padding(
                        padding: const EdgeInsets.all(8.0),
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            // Basic user info
                            Text('ID: $userId',
                                style: const TextStyle(
                                    fontWeight: FontWeight.bold)),
                            Text('‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô: $nickname'),
                            Text('‡∏ä‡∏∑‡πà‡∏≠: $name'),
                            Text('‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå: $relation'),
                            const SizedBox(height: 10),

                            // Show a PageView of all images for this user
                            if (imagePaths.isNotEmpty) ...[
                              SizedBox(
                                height: 200,
                                child: PageView.builder(
                                  itemCount: imagePaths.length,
                                  itemBuilder: (ctx, i) {
                                    return GestureDetector(
                                      onTap: () {
                                        // Navigate to full image view when tapped.
                                        Navigator.push(
                                          context,
                                          MaterialPageRoute(
                                            builder: (context) => FullImagePage(
                                                imagePath: imagePaths[i]),
                                          ),
                                        );
                                      },
                                      child: Image.file(
                                        File(imagePaths[i]),
                                        fit: BoxFit.cover,
                                      ),
                                    );
                                  },
                                ),
                              ),
                            ] else
                              const Text('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ô‡∏ô‡∏µ‡πâ'),

                            const SizedBox(height: 10),
                            // DELETE BUTTON
                            Row(
                              mainAxisAlignment: MainAxisAlignment.end,
                              children: [
                                IconButton(
                                  icon: const Icon(Icons.delete,
                                      color: Colors.red),
                                  tooltip: 'Delete User',
                                  onPressed: () => _deleteUser(context, userId),
                                ),
                              ],
                            ),
                          ],
                        ),
                      ),
                    );
                  },
                );
              },
            ),

            const SizedBox(height: 10),

            // Navigation Buttons Section
            _buildNavigationButton(
                '‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ', Colors.orange, const Ownerinfo()),
            const SizedBox(height: 10),
            _buildNavigationButton(
                '‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô', Colors.red, const SetPhoneNumber()),
            const SizedBox(height: 10),
            _buildNavigationButton(
                '‡∏î‡∏π‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà', Colors.green, const Setmap()),
            const SizedBox(height: 10),
            _buildNavigationButton(
                '‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á', Colors.blueAccent, const CameraPage()),
            const SizedBox(height: 25),
            // ‡∏õ‡∏∏‡πà‡∏°‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ "‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û" ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏î‡πâ
            // _buildNavigationButton('‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û', Colors.purple, const FillInfoPage()),
          ],
        ),
      ),
    );
  }

  /// **üìå Widget ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏™‡πà‡∏ß‡∏ô**
  Widget _buildSectionTitle(String title) {
    return Padding(
      padding: const EdgeInsets.only(top: 20, bottom: 10),
      child: Text(
        title,
        style: const TextStyle(
            fontSize: 20, fontWeight: FontWeight.bold, color: Colors.black87),
      ),
    );
  }

  /// **üìå Widget ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£**
  Widget _buildInfoTile(String title, String value) {
    bool hasData = value != '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•';
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 6.0),
      child: Row(
        children: [
          Icon(
            hasData ? Icons.check_circle : Icons.warning_amber_rounded,
            color: hasData ? Colors.green : Colors.red,
          ),
          const SizedBox(width: 8),
          Expanded(
            flex: 3,
            child: Text(
              '$title:',
              style: const TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
            ),
          ),
          Expanded(
            flex: 5,
            child: Text(
              value,
              style: TextStyle(
                fontSize: 16,
                color: hasData ? Colors.black87 : Colors.red,
              ),
            ),
          ),
        ],
      ),
    );
  }

  /// **üìå Widget ‡∏õ‡∏∏‡πà‡∏°‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÜ**
  Widget _buildNavigationButton(String title, Color color, Widget page) {
    return Center(
      child: ElevatedButton(
        onPressed: () {
          Navigator.push(
            context,
            MaterialPageRoute(builder: (_) => page),
          ).then((_) {
            // This code runs when the pushed route is popped,
            // regardless of whether the user tapped the in‚Äëapp back button or the device‚Äôs back button.
            setState(() {
              _loadData();
            });
          });
        },
        style: ElevatedButton.styleFrom(
          padding: const EdgeInsets.symmetric(horizontal: 30, vertical: 15),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(30),
          ),
          backgroundColor: color,
        ),
        child: Text(
          title,
          style: const TextStyle(fontSize: 18, color: Colors.white),
        ),
      ),
    );
  }
}

/// A new page to display the full image.
class FullImagePage extends StatelessWidget {
  final String imagePath;
  const FullImagePage({Key? key, required this.imagePath}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text("Full Image"),
        backgroundColor: Colors.white,
        leading: IconButton(
          icon: const Icon(Icons.close),
          onPressed: () => Navigator.pop(context),
        ),
      ),
      backgroundColor: Colors.black,
      body: Center(
        child: InteractiveViewer(
          child: Image.file(File(imagePath)),
        ),
      ),
    );
  }
}
